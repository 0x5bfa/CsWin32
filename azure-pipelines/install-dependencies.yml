parameters:
- name: initArgs
  type: string
  default: ''
- name: needsAzurePublicFeeds
  type: boolean
  default: true # If nuget.config pulls from the azure-public account, we need to authenticate when building on the devdiv account.

steps:
- ${{ if and(parameters.needsAzurePublicFeeds, eq(variables['system.collectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564')) }}:
  - template: WIFtoPATauth.yml
    parameters:
      wifServiceConnectionName: azure-public/vside package pull
      deadPATServiceConnectionId: 53e443aa-4df6-4848-a00f-8e0ff4caf7db # azure-public/vside/msft_consumption

- task: NuGetAuthenticate@1
  displayName: üîè Authenticate NuGet feeds
  inputs:
    ${{ if and(parameters.needsAzurePublicFeeds, eq(variables['system.collectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564')) }}:
      nuGetServiceConnections: azure-public/vside/msft_consumption

- powershell: |
    $AccessToken = '$(System.AccessToken)' # Avoid specifying the access token directly on the init.ps1 command line to avoid it showing up in errors
    .\init.ps1 -AccessToken $AccessToken ${{ parameters['initArgs'] }} -UpgradePrerequisites -NoNuGetCredProvider
    dotnet --info

    # Print mono version if it is present.
    if (Get-Command mono -ErrorAction SilentlyContinue) {
      mono --version
    }
  displayName: ‚öô Install prerequisites

# ESRP signing requires this
- task: UseDotNet@2
  displayName: ‚öô Installing .NET Core 2.1 runtime
  inputs:
    packageType: runtime
    version: 2.1.x
  condition: eq(variables['system.collectionId'], 'cb55739e-4afe-46a3-970f-1b49d8ee7564')

- powershell: azure-pipelines/variables/_pipelines.ps1
  failOnStderr: true
  displayName: ‚öô Set pipeline variables based on source
  name: SetPipelineVariables
